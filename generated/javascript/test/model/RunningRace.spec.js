/*
 * Strava API v3
 * The [Swagger Playground](https://developers.strava.com/playground) is the easiest way to familiarize yourself with the Strava API by submitting HTTP requests and observing the responses before you write any client code. It will show what a response will look like with different endpoints depending on the authorization scope you receive from your athletes. To use the Playground, go to https://www.strava.com/settings/api and change your “Authorization Callback Domain” to developers.strava.com. Please note, we only support Swagger 2.0. There is a known issue where you can only select one scope at a time. For more information, please check the section “client code” at https://developers.strava.com/docs.
 *
 * OpenAPI spec version: 3.0.0
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.4.19
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', '../../src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require('../../src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.StravaApiV3);
  }
}(this, function(expect, StravaApiV3) {
  'use strict';

  var instance;

  describe('(package)', function() {
    describe('RunningRace', function() {
      beforeEach(function() {
        instance = new StravaApiV3.RunningRace();
      });

      it('should create an instance of RunningRace', function() {
        // TODO: update the code to test RunningRace
        expect(instance).to.be.a(StravaApiV3.RunningRace);
      });

      it('should have the property id (base name: "id")', function() {
        // TODO: update the code to test the property id
        expect(instance).to.have.property('id');
        // expect(instance.id).to.be(expectedValueLiteral);
      });

      it('should have the property name (base name: "name")', function() {
        // TODO: update the code to test the property name
        expect(instance).to.have.property('name');
        // expect(instance.name).to.be(expectedValueLiteral);
      });

      it('should have the property runningRaceType (base name: "running_race_type")', function() {
        // TODO: update the code to test the property runningRaceType
        expect(instance).to.have.property('runningRaceType');
        // expect(instance.runningRaceType).to.be(expectedValueLiteral);
      });

      it('should have the property distance (base name: "distance")', function() {
        // TODO: update the code to test the property distance
        expect(instance).to.have.property('distance');
        // expect(instance.distance).to.be(expectedValueLiteral);
      });

      it('should have the property startDateLocal (base name: "start_date_local")', function() {
        // TODO: update the code to test the property startDateLocal
        expect(instance).to.have.property('startDateLocal');
        // expect(instance.startDateLocal).to.be(expectedValueLiteral);
      });

      it('should have the property city (base name: "city")', function() {
        // TODO: update the code to test the property city
        expect(instance).to.have.property('city');
        // expect(instance.city).to.be(expectedValueLiteral);
      });

      it('should have the property state (base name: "state")', function() {
        // TODO: update the code to test the property state
        expect(instance).to.have.property('state');
        // expect(instance.state).to.be(expectedValueLiteral);
      });

      it('should have the property country (base name: "country")', function() {
        // TODO: update the code to test the property country
        expect(instance).to.have.property('country');
        // expect(instance.country).to.be(expectedValueLiteral);
      });

      it('should have the property routeIds (base name: "route_ids")', function() {
        // TODO: update the code to test the property routeIds
        expect(instance).to.have.property('routeIds');
        // expect(instance.routeIds).to.be(expectedValueLiteral);
      });

      it('should have the property measurementPreference (base name: "measurement_preference")', function() {
        // TODO: update the code to test the property measurementPreference
        expect(instance).to.have.property('measurementPreference');
        // expect(instance.measurementPreference).to.be(expectedValueLiteral);
      });

      it('should have the property url (base name: "url")', function() {
        // TODO: update the code to test the property url
        expect(instance).to.have.property('url');
        // expect(instance.url).to.be(expectedValueLiteral);
      });

      it('should have the property websiteUrl (base name: "website_url")', function() {
        // TODO: update the code to test the property websiteUrl
        expect(instance).to.have.property('websiteUrl');
        // expect(instance.websiteUrl).to.be(expectedValueLiteral);
      });

    });
  });

}));
